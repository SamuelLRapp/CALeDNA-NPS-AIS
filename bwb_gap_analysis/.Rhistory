#list <- list + splitstring[y]
}
}
}
return<-unique(list)
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
hi<-strsplit(UCNRS_site_comparison_data[1,7],";")
hi
hi[[7]]
hi[[1]]
hi[2]
hi[1]
class(hi[1])
class(hi)
strsplit(UCNRS_site_comparison_data[1,7],";")
strsplit(UCNRS_site_comparison_data[1,7],";")
strsplit(hi," "" ")
library(tidyverse, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
str_split(UCNRS_site_comparison_data[1,7],";", n = Inf, simplify = FALSE)
hi<- str_split(UCNRS_site_comparison_data[1,7],";", n = Inf, simplify = FALSE)
hi
hi[1]
hi[2]
hi[[2]]
hi[[1]][1]
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring))
{
print(splitstring[y])
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
return<-unique(list)
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
cheeck
View(Anthropoda_df)
hi<-strsplit(UCNRS_site_comparison_data[1,7],";")
hi[[1]][1]
hi[[1]][2]
hi
length(hi)
length(hi[1])
length(hi[[1]])
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]]))
{
print(splitstring[[1]][y])
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
return<-unique(list)
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
cheeck
View(Anthropoda_df)
View(UCNRS_site_comparison_data)
Anthropoda_df
View(Anthropoda_df)
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list[1]))
return<-unique(list)
print(length(list[1]))
return
}
Anthropoda_df <- UCNRS_site_comparison_data[UCNRS_site_comparison_data$Phylum == 'Arthropoda',]
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list[[1]]))
return<-unique(list)
print(length(list[[1]]))
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
length(cheeck)
length(cheeck[1])
length(cheeck[[1]])
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list))
return<-unique(list)
print(length(list1))s
return
}
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list))
return<-unique(list)
print(length(list1))
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list))
return<-unique(list)
print(length(list))
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
print(i)
}else
{
splitstring <- strsplit(UCNRS_site_comparison_data[i,7],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list))
return<-unique(list)
print(length(return))
return
}
cheeck <- create_list_then_deduplicate(Anthropoda_df,7)
cheeck
print_list_comma_seperated <- function(list)
{
length<-length(list)
for(i in 1:length)
{
print(past0(list[i],","))
}
list
}
print_list_comma_seperated(cheeck)
print_list_comma_seperated <- function(list)
{
length<-length(list)
for(i in 1:length)
{
print(paste0(list[i],","))
}
list
}
print_list_comma_seperated(cheeck)
write.csv(cheeck, file = "firstconvert2.csv", row.names= FALSE)
file.show(cheeck)
file.show(cheeck)
file.show("cheeck")
vectStr=paste(as.character(cheeck), sep="' '", collapse=",")
file.show("cheeck")
sink("Family_comma_sep_list.txt")
sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
file.show("cheeck")
download_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
#sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
file.show("cheeck")
# length<-length(list)
# for(i in 1:length)
# {
#   print(paste0(list[i],","))
# }
list
}
#how big is the dataset? ie how long will it take to run on bwb ref seq
download_list_comma_seperated(cheeck)
download_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
#sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
file.show()
list
}
#how big is the dataset? ie how long will it take to run on bwb ref seq
download_list_comma_seperated(cheeck)
download_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
#sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
#file.show("cheeck")
# length<-length(list)
# for(i in 1:length)
# {
#   print(paste0(list[i],","))
# }
list
}
#how big is the dataset? ie how long will it take to run on bwb ref seq
download_list_comma_seperated(cheeck)
download_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
#sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
file.show("vectStr")
# length<-length(list)
# for(i in 1:length)
# {
#   print(paste0(list[i],","))
# }
#list
}
#how big is the dataset? ie how long will it take to run on bwb ref seq
download_list_comma_seperated(cheeck)
download_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
#sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
#file.show("vectStr")
# length<-length(list)
# for(i in 1:length)
# {
#   print(paste0(list[i],","))
# }
#list
}
#how big is the dataset? ie how long will it take to run on bwb ref seq
download_list_comma_seperated(cheeck)
download_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
#sink("cheeck")
cat(vectStr)
#cat("\n")
sink()
#file.show("vectStr")
# length<-length(list)
# for(i in 1:length)
# {
#   print(paste0(list[i],","))
# }
#list
}
#how big is the dataset? ie how long will it take to run on bwb ref seq
download_list_comma_seperated(cheeck)
vectStr=paste(as.character(cheeck), sep="' '", collapse=",")
cat(vectStr)
#cat("\n")
sink()
file.show("cheeck")
sink("cheeck")
newcheck
newcheck<-cat(vectStr)
newcheck
newcheck
sink("newcheck")
vectStr=paste(as.character(cheeck), sep="' '", collapse=",")
newcheck<-cat(vectStr)
sink("newcheck")
cat(vectStr)
vectStr
vectStr=paste(as.character(cheeck), sep="' '", collapse=",")
Acaena
file.show("cheeck")
View(UCNRS_site_comparison_data)
cheeck <- create_list_then_deduplicate(UCNRS_site_comparison_data,7)
cheeck <- create_list_then_deduplicate(UCNRS_site_comparison_data,7)
fileBig <- file.choose()
UCNRS_site_comparison_data<- read.csv(file = fileBig)
#sort data into Anthropoda, Chordata, Streptophyta phylum
Anthropoda_df <- UCNRS_site_comparison_data[UCNRS_site_comparison_data$Phylum == 'Arthropoda',]
Chordata_df <- UCNRS_site_comparison_data[UCNRS_site_comparison_data$Phylum == 'Chordata',]
Streptophyta_df <- UCNRS_site_comparison_data[UCNRS_site_comparison_data$Phylum == 'Streptophyta',]
#sort data into species level, genus level, family level data
Anthropoda_genus_df <- Anthropoda_df[Anthropoda_df$taxlevel == 'Genus',]
Anthropoda_family_df <- Anthropoda_df[Anthropoda_df$taxlevel == 'Family',]
Anthropoda_order_df <- Anthropoda_df[Anthropoda_df$taxlevel == 'Order',]
Chordata_genus_df <- Chordata_df[Chordata_df$taxlevel == 'Genus',]
Chordata_family_df <- Chordata_df[Chordata_df$taxlevel == 'Family',]
Chordata_order_df <- Chordata_df[Chordata_df$taxlevel == 'Order',]
Streptophyta_genus_df <- Streptophyta_df[Streptophyta_df$taxlevel == 'Genus',]
Streptophyta_family_df <- Streptophyta_df[Streptophyta_df$taxlevel == 'Family',]
Streptophyta_order_df <- Streptophyta_df[Streptophyta_df$taxlevel == 'Order',]
#get the unique to traditional surveys taxa names into a list & deduplicate the list
#7 is the column with unique traditional taxa, 6 is the column with unique eDNA taxa
Anthropoda_unique_traditional_genus <- create_list_then_deduplicate(Anthropoda_genus_df,7) #733 unique anthropoda genus to traditional survey
Anthropoda_unique_traditional_family <- create_list_then_deduplicate(Anthropoda_family_df,7) #153unique anthropoda family to traditional survey
Anthropoda_unique_traditional_order <- create_list_then_deduplicate(Anthropoda_order_df,7) #14 unique anthropoda orders to traditional survey
Chordata_unique_traditional_genus <- create_list_then_deduplicate(Chordata_genus_df,7) #346 unique Chordata genus to traditional survey
Chordata_unique_traditional_family <- create_list_then_deduplicate(Chordata_family_df,7) #115 unique Chordata genus to traditional survey
Chordata_unique_traditional_order <- create_list_then_deduplicate(Chordata_order_df,7) #34 unique Chordata genus to traditional survey
Streptophyta_unique_traditional_genus <- create_list_then_deduplicate(Streptophyta_genus_df,7) #680unique Streptophyta genus to traditional survey
Streptophyta_unique_traditional_family <- create_list_then_deduplicate(Streptophyta_family_df,7) #140 unique Streptophyta family to traditional survey
Streptophyta_unique_traditional_order <- create_list_then_deduplicate(Streptophyta_order_df,7) #46 unique Streptophyta orders to traditional survey
#print the list and take it to bwb reference sequence browser
print_list_comma_seperated(Anthropoda_unique_traditional_family)#on desktop
print_list_comma_seperated <- function(list)#puts list or column of a dataframe into your working directory as a comma seperated files
{
vectStr=paste(as.character(list), sep="' '", collapse=",")
cat(vectStr)
}
View(Chordata_family_df)
#get the unique to traditional surveys taxa names into a list & deduplicate the list
#7 is the column with unique traditional taxa, 6 is the column with unique eDNA taxa
Anthropoda_unique_traditional_genus <- create_list_then_deduplicate(Anthropoda_genus_df,7) #733 unique anthropoda genus to traditional survey
create_list_then_deduplicate <- function(dataframe,# take in this data that is all ; seperated and put it into a list then dedup it
column#column with taxa names seperated by ;
#for this we will use the column with unique traditional observations taxa (7)
)
{
list <- c() # list
x<-nrow(dataframe)
for(i in 1:x)
{
if(   is.na(dataframe[i,column])  )
{
#print hello
#print(i)
}else
{
splitstring <- strsplit(dataframe[i,column],";")
for(y in 1:length(splitstring[[1]])) #length of first list, rather than length of list of lists
{
#print(splitstring[[1]][y]) #list 1, entry y in list 1
# class(splitstring)
list <- c(list,splitstring[[1]][y])
#list <- list + splitstring[y]
}
}
}
print(length(list))
return<-unique(list)
print(length(return))
return
}
Anthropoda_unique_traditional_family <- create_list_then_deduplicate(Anthropoda_family_df,7) #153unique anthropoda family to traditional survey
#print the list and take it to bwb reference sequence browser
print_list_comma_seperated(Anthropoda_unique_traditional_family)#on desktop
print_list_comma_seperated(Anthropoda_unique_traditional_genus)
